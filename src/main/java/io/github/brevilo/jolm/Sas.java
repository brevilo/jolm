/*
 * Copyright 2021 Oliver Behnke
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.brevilo.jolm;

import com.sun.jna.Memory;
import io.github.brevilo.jolm.Utils.OlmException;
import io.github.brevilo.jolm.jna.NativeSize;
import io.github.brevilo.jolm.jna.OlmLibrary;
import io.github.brevilo.jolm.jna.OlmSas;

/** Class to represent an Olm short authentication string (SAS) object. */
public class Sas {

  // backing store
  public final OlmSas instance;

  /**
   * Creates a new SAS object.
   *
   * @throws OlmException <code>NOT_ENOUGH_RANDOM</code> if there weren't enough random bytes
   */
  public Sas() throws OlmException {
    // initialize backing store
    instance = Utils.initialize(OlmLibrary::olm_sas, OlmLibrary::olm_sas_size);

    // generate random private key
    NativeSize randomLength = OlmLibrary.olm_create_sas_random_length(instance);
    Memory randomBuffer = Utils.randomBuffer(randomLength);

    // call olm
    NativeSize result = OlmLibrary.olm_create_sas(instance, randomBuffer, randomLength);

    // clear the random buffer
    randomBuffer.clear();

    checkOlmResult(result);
  }

  /** Clears the memory used to back this SAS object. */
  public void clear() {
    OlmLibrary.olm_clear_pk_decryption(instance);
  }

  /**
   * Get the public key for the SAS object. This returns the public key of the SAS object that can
   * then be shared with another user to perform the authentication process.
   *
   * @return public key
   * @throws OlmException <code>OUTPUT_BUFFER_TOO_SMALL</code> if the key buffer is too small
   */
  public String publicKey() throws OlmException {
    // prepare output buffer
    NativeSize publicKeyLength = OlmLibrary.olm_sas_pubkey_length(instance);
    Memory publicKeyBuffer = new Memory(publicKeyLength.longValue());

    // call olm
    NativeSize result = OlmLibrary.olm_sas_get_pubkey(instance, publicKeyBuffer, publicKeyLength);
    checkOlmResult(result);

    return Utils.fromNative(publicKeyBuffer);
  }

  /**
   * Sets the public key of the other user. It needs to be set before bytes can be generated for the
   * authentication string and a MAC can be calculated.
   *
   * @param publicKey public key of the other user
   * @throws OlmException <code>INPUT_BUFFER_TOO_SMALL</code> if their key buffer is too small
   */
  public void setTheirKey(String publicKey) throws OlmException {
    // get native key
    Memory theirKeyBuffer = Utils.toNative(publicKey);

    // call olm
    NativeSize result =
        OlmLibrary.olm_sas_set_their_key(instance, theirKeyBuffer, new NativeSize(theirKeyBuffer));

    checkOlmResult(result);
  }

  /**
   * Checks if their key was set.
   *
   * @return true if key was set
   */
  public boolean isTheirKeySet() {
    return OlmLibrary.olm_sas_is_their_key_set(instance) != 0;
  }

  /**
   * Generate bytes to use for the short authentication string. The other public key needs to be set
   * for this method to work.
   *
   * @param info extra information to mix in when generating the bytes, as per the Matrix spec
   * @param numberOfBytes number of bytes to generate (for hex-based SAS as in the Matrix spec, this
   *     will be five)
   * @return generated bytes
   * @throws OlmException <code>SAS_THEIR_KEY_NOT_SET</code> if their key wasn't set
   */
  public byte[] generateBytes(String info, int numberOfBytes) throws OlmException {
    // get native extra info
    Memory infoBuffer = Utils.toNative(info);

    // prepare output buffer
    Memory bytesBuffer = new Memory(numberOfBytes);

    // call olm
    NativeSize result =
        OlmLibrary.olm_sas_generate_bytes(
            instance,
            infoBuffer,
            new NativeSize(infoBuffer),
            bytesBuffer,
            new NativeSize(bytesBuffer));

    checkOlmResult(result);

    return bytesBuffer.getByteArray(0, numberOfBytes);
  }

  /**
   * Generate a message authentication code (MAC) based on the shared secret. The other public key
   * needs to be set for this method to work.
   *
   * @param message message to produce the authentication code for
   * @param info extra information to mix in when generating the MAC, as per the Matrix spec
   * @return message authentication code
   * @throws OlmException <code>OUTPUT_BUFFER_TOO_SMALL</code> if the MAC buffer is too small
   */
  public String calculateMac(String message, String info) throws OlmException {
    // get native message and info
    Memory messageBuffer = Utils.toNative(message);
    Memory infoBuffer = Utils.toNative(info);

    // prepare output buffer
    NativeSize macLength = OlmLibrary.olm_sas_mac_length(instance);
    Memory macBuffer = new Memory(macLength.longValue());

    // call olm
    NativeSize result =
        OlmLibrary.olm_sas_calculate_mac(
            instance,
            messageBuffer,
            new NativeSize(messageBuffer),
            infoBuffer,
            new NativeSize(infoBuffer),
            macBuffer,
            macLength);

    checkOlmResult(result);

    return Utils.fromNative(macBuffer);
  }

  /**
   * Generate a message authentication code (MAC) based on the shared secret. The other public key
   * needs to be set for this method to work. This variant produces base64 strings that are
   * compatible with other base64 implementations.
   *
   * @param message message to produce the authentication code for
   * @param info extra information to mix in when generating the MAC, as per the Matrix spec
   * @return message authentication code
   * @throws OlmException <code>OUTPUT_BUFFER_TOO_SMALL</code> if the MAC buffer is too small
   */
  public String calculateMacFixedBase64(String message, String info) throws OlmException {
    // get native message and info
    Memory messageBuffer = Utils.toNative(message);
    Memory infoBuffer = Utils.toNative(info);

    // prepare output buffer
    NativeSize macLength = OlmLibrary.olm_sas_mac_length(instance);
    Memory macBuffer = new Memory(macLength.longValue());

    // call olm
    NativeSize result =
        OlmLibrary.olm_sas_calculate_mac_fixed_base64(
            instance,
            messageBuffer,
            new NativeSize(messageBuffer),
            infoBuffer,
            new NativeSize(infoBuffer),
            macBuffer,
            macLength);

    checkOlmResult(result);

    return Utils.fromNative(macBuffer);
  }

  /**
   * Generate a message authentication code (MAC) based on the shared secret. The other public key
   * needs to be set for this method to work. For compatibility with an old version of Riot.
   *
   * @param message message to produce the authentication code for
   * @param info extra information to mix in when generating the MAC, as per the Matrix spec
   * @return message authentication code
   * @throws OlmException <code>OUTPUT_BUFFER_TOO_SMALL</code> if the MAC buffer is too small
   */
  @Deprecated
  public String calculateMacLongKdf(String message, String info) throws OlmException {
    // get native message and info
    Memory messageBuffer = Utils.toNative(message);
    Memory infoBuffer = Utils.toNative(info);

    // prepare output buffer
    NativeSize macLength = OlmLibrary.olm_sas_mac_length(instance);
    Memory macBuffer = new Memory(macLength.longValue());

    // call olm
    NativeSize result =
        OlmLibrary.olm_sas_calculate_mac_long_kdf(
            instance,
            messageBuffer,
            new NativeSize(messageBuffer),
            infoBuffer,
            new NativeSize(infoBuffer),
            macBuffer,
            macLength);

    checkOlmResult(result);

    return Utils.fromNative(macBuffer);
  }

  /**
   * Check the latest olm function call for errors.
   *
   * @param result result returned by the olm function call to check
   * @throws OlmException thrown if an error occurred (incl. error details)
   */
  private void checkOlmResult(NativeSize result) throws OlmException {
    if (result.equalTo(OlmLibrary.olm_error())) {
      throw new OlmException(OlmLibrary.olm_sas_last_error(instance));
    }
  }
}
